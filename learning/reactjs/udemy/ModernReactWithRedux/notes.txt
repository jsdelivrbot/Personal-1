React Definition

React is a javascript view library that is used to produce html that is shown to the user in browser. When you write ract code, we are creating 
individual components or views. We nest multiple components for complex application to make it 
really simple so that code can be reusable and more readable.

//Components or views
Snippet of code that produces html

//USE REACT SIMPLE STARTER GITHUB PROJECT FOR REACT PROJECT.

1. JSX library used in place of core react syntax for creating dom elements

   JSX                                                                  React syntax
               
   ////////////   SIMPLE                                                  //// HARD TO WRITE
                                   
                                                                       var App = function App() {
    const App = () =>{
    return <div><div class="hello" id="1">1</div></div>;                return React.createElement(
                                                                            "div",
                                                                            null,
                                                                            React.createElement(
                                                                                "div",
                                                                                { "class": "hello", id: "1" },
                                                                                "1"
                                                                            )
                                                                        );
                                                                    };
 
 
 > ReactDOM Vs React

 1. React dom is used to iteract with actual dom
 2. React is used  to create and manage components

 > Components Class Vs Component Instance
> Render Targets
> Export Statements

> Functional Based Component and Class Component
Functional based component do not have states. Only class based component has state. Use Functional based component if you are not managing any state.
Functional based component
are used Whenever we are taking some information and spitting out some JSX. Functional based component can contain class based component

Class based component 
 are used Whenever we have an component that needs to be an aware of state in some fashion means data is changing over time reacting to user events
and we need to keep track some aspect of state from render pass to pass.

> Event based component

> State
State is a plain javascript object that is used to record and react to user events. Each class based component we define has its own state object. Whenever component state
change the component immediately re-render and also its children will re-render.

> Controlled Component 
 What is controlled field/ input/ form element?
 It is a form element like a input whose value is set by state rather than other way around.

> Props

> Es6 Template Strings

> Redux
  on the top of redux you have webpack, redux router, react router, redux promise and redux thunk, hot reloading,
  Es6 Syntax

  Redux is a predictable state container in javascript apps project. Views are more controlled by react but data is controlled by redux.
  All the data which is centrallized managaged by redux.

  Reducers
  A reducer is a function that returns a piece of application state because our application ha many different pieces of state. You can have many different 
  reducers

  React Redux seperate library
  
  A container is a react component that has a direct connection to the state management by redux. A container 
  is also sometimes called smart component or called dumb component; It is a normal react component
   that gets binded to application state

  React redux forms a bridge connection between data and view


  User clicks- call action creator
      |
      |
Action creator returns an action
      |
      |
Action is an object automatically sent to all Reducers
      |
      |
property on state set to value returned from the reducer
      |
      |
All reducers process the action and returned new state. New state has been 
assembled. Notify container of the changes to state. On notification, container
will re-render with new props.


Middleware are functions that takes an action and depending upon the action type or the action
payload or any number of actors the Middleware can choose to let the action pass through.
It can manipulate the action and console logs it or stops it together before they reach to any reducers




Redux is a incharge of managing application state. state is a single plain javascript object
Reducers are incharge of changing application state over time with the help of action

Redux contains an application state which is generated by series of reducers
we write then state is modified by action creators and then action creators return action
which flow through middleware and then into reducer. Whenever a new set of state is
produced it flows into a container and those container re-render itself and entire process repeats itself again and again


Redux-promise
Axios


REACT LIFECYCLE METHODS
render()
ComponentWillMount() - It is a one  of lifecycle method that gets called automatically
before this component render to the screen 
ComponentsDidMount() - It is a one  of lifecycle method that gets called automatically
after this component render to the screen


//MODULES
youtube-api-search
babel-loader
babel-core
babel-preset-env
babel-preset-react
webpack
webpack-dev-server
react
react-dom
Redux-Promise
Axios
react-google-maps
react-sparklines
react-router-dom
redux-form version 6.6.3
underscore

Redux-Form - http://www.redux-form.com


