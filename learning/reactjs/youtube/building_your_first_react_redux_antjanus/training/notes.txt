Redux does not have a dispatcher or support many stores.Instead, there is single store. As your app grows you will not split into multiple stoes instead split into
reducers independently operationg on the different parts of the state.

// actions
a. communicate data from view to main reducer
b. do not mutate data
c. place to put async logic

//action and action creator

Action is a plain javascript object containing payload of information and it sends data from application to store while Action creators are functions that
create actions. They can dispatch by various parts of your application and they are received by store.

// Reducers
a. recieve data from actions
b.. recieve current state

The reducer is a pure function that takes the current state and an action,
 and returns the next state. Note that the state is accumulated as 
 each action on the collection is applied to change this state. the store passes dispatch actions to reducers which receive the actions
 and make appropriate  changes to state.


//store
a. Deals with connecting the entire application
b. You can subscribe directly with callback or use a connector to work with react
c. Dispatch

A store holds the whole applicaton state. the only way to change the state inside it to Dispatch
an action on it.A store is not a class. It is just an object with few methods on it. It can dispatch actions and receive actions
Howerver, store does not want to handle dispatched actions and actually enact changes to state.  For that, we use reducers


//Dispatch
a. It sends data through store which invoke the main reducer with current state and new data.
b. Used to run actions and start the data cycle

// Components
It is the presentation or view layer of application.Certain components, parent or container components, connected to store.
These components will be altered whenever changes to the state made by reducers. These components will re-render

Presentational Components(Dumb Components) vs ContainerComponents(Smart Components)

a. Purpose-How things look(markup, styles)/How things work(data fetching, state updates)
b. Aware of redux-not aware of redux/ aware of redux
c. To read data- read data from props/ subscribe to redux state
d. To change data-invoke callback from props/ dispatch redux actions
e. Are written - by hand/ usually generated by react redux

PropTypes

1. React.PropTypes.number.isRequired
2. React.PropTypes.string.isRequired
3. React.PropTypes.object.isRequired
4. React.PropTypes.array.isRequired
5. React.PropTypes.arrayOf(React.PropTypes.Object) // should be an array of objects
6. React.PropTypes.oneOfType([
    React.PropTypes.number,
    React.PropTypes.string
]).isRequired
7. React.PropTypes.shape({
    id:React.PropTypes.number.isRequired,
    text:React.PropTypes.string.isRequired
})
8. React.PropTypes.instanceOf(date)